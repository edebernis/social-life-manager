syntax = "proto3";

package location.v1;

option go_package = "api/grpc/v1";

import "github.com/mwitkow/go-proto-validators/validator.proto";

service LocationService {
    // Creates a new category.
    rpc CreateCategory(CreateCategoryRequest) returns (CreateCategoryResponse) {}
    // Retrieve all location categories.
    rpc GetCategories(GetCategoriesRequest) returns (GetCategoriesResponse) {}
    // Retrieve one specific category.
    rpc GetCategory(GetCategoryRequest) returns (GetCategoryResponse) {}
    // Update one category.
    rpc UpdateCategory(UpdateCategoryRequest) returns (UpdateCategoryResponse) {}
    // Delete one category.
    rpc DeleteCategory(DeleteCategoryRequest) returns (DeleteCategoryResponse) {}

    // Creates a new user location.
    rpc CreateLocation(CreateLocationRequest) returns (CreateLocationResponse) {}
    // Retrieve all user locations.
    rpc GetLocations(GetLocationsRequest) returns (GetLocationsResponse) {}
    // Retrieve one specific user location.
    rpc GetLocation(GetLocationRequest) returns (GetLocationResponse) {}
    // Update one user location.
    rpc UpdateLocation(UpdateLocationRequest) returns (UpdateLocationResponse) {}
    // Delete one user location.
    rpc DeleteLocation(DeleteLocationRequest) returns (DeleteLocationResponse) {}
}

message Category {
    // Category ID. Must be unique.
    string id = 1;
    // Short descriptive name of the category. Like "Homes" or "Tennis Center".
    string name = 2;
}

message Location {
    // Location ID. Must be unique.
    string id = 1;
    // Short descriptive name of the location, like "Home" or "Work".
    string name = 2;
    // Full address of the location. Should contains at least street, postal code and city.
    string address = 3;
    // Location category foreign key.
    string category_id = 4;
}

message CreateCategoryRequest {
    // Name of the new category.
    string name = 1 [(validator.field) = {string_not_empty: true}];
}

message CreateCategoryResponse {
    // Created category with its ID.
    Category category = 1;
}

message GetCategoriesRequest {}

message GetCategoriesResponse {
    // All location categories.
    repeated Category categories = 1;
}

message GetCategoryRequest {
    // Category ID to retrieve.
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message GetCategoryResponse {
    // Fetched category.
    Category category = 1;
}

message UpdateCategoryRequest {
    // New name to update the category with
    string name = 1 [(validator.field) = {string_not_empty: true}];
}

message UpdateCategoryResponse {
    // Updated category.
    Category category = 1;
}

message DeleteCategoryRequest {
    // ID of the category to delete.
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message DeleteCategoryResponse {}

message CreateLocationRequest {
    // Name of the new location.
    string name = 1 [(validator.field) = {string_not_empty: true}];
    // Address of the new location.
    string address = 2 [(validator.field) = {string_not_empty: true}];
    // Category ID of the new location.
    string category_id = 3 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message CreateLocationResponse {
    // Created user location with its ID.
    Location location = 1;
}

message GetLocationsRequest {}

message GetLocationsResponse {
    // All user locations.
    repeated Category categories = 1;
}

message GetLocationRequest {
    // Location ID to retrieve.
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message GetLocationResponse {
    // Fetched location.
    Location location = 1;
}

message UpdateLocationRequest {
    // New name to update the location with
    string name = 1;
    // New address to update the location with
    string address = 2;
    // New category to update the location with
    string category_id = 3 [(validator.field) = {uuid_ver: 4}];
}

message UpdateLocationResponse {
    // Updated location.
    Location location = 1;
}

message DeleteLocationRequest {
    // Location ID to delete.
    string id = 1 [(validator.field) = {uuid_ver: 4, string_not_empty: true}];
}

message DeleteLocationResponse {}
