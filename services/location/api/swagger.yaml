basePath: /api/v1
definitions:
  httpapi.HTTPError:
    properties:
      code:
        description: HTTP status code.
        example: 400
        type: integer
      message:
        description: String describing the error that occurred.
        example: Bad Request
        type: string
    type: object
  models.Category:
    properties:
      id:
        description: Category ID. Must be unique.
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        x-order: "1"
      name:
        description: Short descriptive name of the category. Like "Homes" or "Tennis
          Center".
        example: Homes
        type: string
        x-order: "2"
    type: object
  models.CreateCategory:
    properties:
      name:
        description: Short descriptive name of the category. Like "Homes" or "Tennis
          Center".
        example: Homes
        type: string
        x-order: "1"
    required:
    - name
    type: object
  models.CreateLocation:
    properties:
      address:
        description: Full address of the location. Should contains at least street,
          postal code and city.
        example: 1 rue de la Poste, 75001 Paris
        type: string
        x-order: "2"
      category_id:
        description: Location category foreign key.
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        x-order: "3"
      name:
        description: Short descriptive name of the location, like "Home" or "Work".
        example: Home
        type: string
        x-order: "1"
    required:
    - address
    - category_id
    - name
    type: object
  models.Location:
    properties:
      address:
        description: Full address of the location. Should contains at least street,
          postal code and city.
        example: 1 rue de la Poste, 75001 Paris
        type: string
        x-order: "3"
      category_id:
        description: Location category foreign key.
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        x-order: "4"
      id:
        description: Location ID. Must be unique.
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        x-order: "1"
      name:
        description: Short descriptive name of the location, like "Home" or "Work".
        example: Home
        type: string
        x-order: "2"
      user_id:
        description: User ID. Owner of the location.
        example: 550e8400-e29b-41d4-a716-446655440000
        type: string
        x-order: "5"
    type: object
host: localhost:8080
info:
  contact:
    email: emeric.debernis@gmail.com
    name: Emeric de Bernis
  description: |-
    This REST API handles management of user locations. Locations can be saved in a local repository
    or fetched from third-party sources such as Google Maps "My Places".
  title: Locations Service REST API
  version: "1.0"
paths:
  /categories:
    get:
      description: Get all categories.
      produces:
      - application/json
      responses:
        "200":
          description: The returned categories
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Get categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create new categories.
      parameters:
      - description: New category
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/models.CreateCategory'
      produces:
      - application/json
      responses:
        "200":
          description: The created category
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Create categories
      tags:
      - categories
  /categories/{id}:
    delete:
      description: Delete one specific category using provided ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Delete category
      tags:
      - categories
    get:
      description: Get one specific category using provided ID.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The returned category
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Get category with specified ID
      tags:
      - categories
    put:
      description: Update specified category using provided values.
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category name
        in: body
        name: name
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: The updated category
          schema:
            $ref: '#/definitions/models.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Update category
      tags:
      - categories
  /locations:
    get:
      description: Get all user locations.
      parameters:
      - description: Category ID
        in: query
        name: category_id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The returned locations
          schema:
            items:
              $ref: '#/definitions/models.Location'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Get locations
      tags:
      - locations
    post:
      consumes:
      - application/json
      description: Create new user locations.
      parameters:
      - description: New location
        in: body
        name: location
        required: true
        schema:
          $ref: '#/definitions/models.CreateLocation'
      produces:
      - application/json
      responses:
        "200":
          description: The created location
          schema:
            $ref: '#/definitions/models.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Create locations
      tags:
      - locations
  /locations/{id}:
    delete:
      description: Delete one specific location using provided ID.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Delete location
      tags:
      - locations
    get:
      description: Get one specific location using provided ID.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: The returned location
          schema:
            $ref: '#/definitions/models.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Get location with specified ID
      tags:
      - locations
    put:
      description: Update specified location using provided values.
      parameters:
      - description: Location ID
        in: path
        name: id
        required: true
        type: string
      - description: Location name
        in: body
        name: name
        schema:
          type: string
      - description: Location address
        in: body
        name: address
        schema:
          type: string
      - description: Location category
        in: body
        name: category_id
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: The updated location
          schema:
            $ref: '#/definitions/models.Location'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httpapi.HTTPError'
      summary: Update location
      tags:
      - locations
  /ping:
    get:
      description: Basic check of HTTP API health. Ensure that HTTP service is working
        correctly.
      produces:
      - application/json
      responses:
        "200":
          description: ""
      summary: Ping API
      tags:
      - healthchecks
schemes:
- http
swagger: "2.0"
